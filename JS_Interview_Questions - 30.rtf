{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Aptos;}{\f1\fnil\fcharset0 Calibri;}{\f2\fnil\fcharset2 Symbol;}}
{\*\listtable 
{\list\listhybrid
{\listlevel\levelnfc23\leveljc0\levelstartat1{\leveltext\'01\'B7;}{\levelnumbers;}\f2\jclisttab\tx360}
{\listlevel\levelnfc23\leveljc0\levelstartat1{\leveltext\'01\'B7;}{\levelnumbers;}\f2\jclisttab\tx360}\listid1 }}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\widctlpar\sa160\sl276\slmult1\kerning2\b\f0\fs24\lang16393 1. Explain the differences between == and ===.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 == (Loose Equality):\b0  Checks for value equality after performing type coercion if necessary.\par
{\pntext\f2\'B7\tab}\b === (Strict Equality):\b0  Checks for both value and type equality without performing type coercion.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
javascript\par
Copy code\par
0 == false;    // true, because false is coerced to 0\par
0 === false;   // false, because they are of different types\par
\par
\b 2. What is event delegation, and how does it function in JavaScript?\par
\b0 Event delegation is a technique where a single event listener is added to a parent element to manage events triggered by its child elements. It relies on event propagation (bubbling) to capture events from child elements.\par
\b Example:\b0\par
javascript\par
Copy code\par
document.getElementById('parent').addEventListener('click', function(event) \{\par
  if (event.target && event.target.matches('button.child')) \{\par
    console.log('Child button clicked:', event.target);\par
  \}\par
\});\par
\par
\b 3. Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?\par
\b0 ES6 introduced arrow functions, which do not have their own this binding. Instead, they inherit this from the surrounding scope, simplifying context management.\par
\b Example:\b0\par
javascript\par
Copy code\par
function Person() \{\par
  this.age = 0;\par
\par
  setInterval(() => \{\par
    this.age++; // 'this' refers to the Person instance\par
  \}, 1000);\par
\}\par
\par
const person = new Person();\par
\par
\b 4. Explain the concept of prototypal inheritance.\par
\b0 Prototypal inheritance is a feature where objects inherit properties and methods from other objects via the prototype chain. Each object has a prototype, and properties are searched up the chain when not found on the object itself.\par
\b Example:\b0\par
javascript\par
Copy code\par
const parent = \{\par
  greet() \{\par
    console.log('Hello from parent');\par
  \},\par
\};\par
\par
const child = Object.create(parent);\par
child.greet(); // Outputs: 'Hello from parent'\par
\par
\b 5. Differentiate between a variable that is null, undefined, or undeclared.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Undefined:\b0  A variable declared but not assigned a value.\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
let a;\par
console.log(a); // undefined\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Null:\b0  An assigned value that represents "no value."\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
let b = null;\par
console.log(b); // null\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Undeclared:\b0  A variable that hasn't been declared in the current scope.\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
console.log(c); // ReferenceError: c is not defined\par
\par
\b 6. Define what a closure is and describe its uses and advantages.\par
\b0 A closure is a function that has access to its own scope, the outer function's scope, and the global scope. Closures allow functions to retain access to variables from their lexical scope even when executed outside that scope.\par
\b Uses and Advantages:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Data Encapsulation:\b0  Create private variables.\par
{\pntext\f2\'B7\tab}\b State Preservation:\b0  Maintain state between function calls.\par
{\pntext\f2\'B7\tab}\b Functional Programming:\b0  Enable currying and higher-order functions.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
javascript\par
Copy code\par
function makeCounter() \{\par
  let count = 0;\par
  return function () \{\par
    count++;\par
    return count;\par
  \};\par
\}\par
\par
const counter = makeCounter();\par
console.log(counter()); // 1\par
console.log(counter()); // 2\par
\par
\b 7. Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 forEach():\b0  Executes a function for each array element but does not return a new array.\par
{\pntext\f2\'B7\tab}\b map():\b0  Creates a new array by applying a function to each element of the original array.\par

\pard\widctlpar\sa160\sl276\slmult1\b When to Use:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Use forEach() for side effects (e.g., updating external variables).\par
{\pntext\f2\'B7\tab}Use map() when you need a transformed array.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
javascript\par
Copy code\par
const numbers = [1, 2, 3];\par
\par
// Using forEach\par
numbers.forEach((num, index) => \{\par
  numbers[index] = num * 2;\par
\});\par
\par
// Using map\par
const doubled = numbers.map(num => num * 2);\par
\par
\b 8. What is a common scenario for employing anonymous functions?\par
\b0 Anonymous functions are often used as arguments to higher-order functions, such as event handlers or array methods (map, filter, reduce).\par
\b Example:\b0\par
javascript\par
Copy code\par
setTimeout(function () \{\par
  console.log('Executed after 1 second');\par
\}, 1000);\par
\par
\b 9. Distinguish between host objects and native objects.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Native Objects:\b0  Standard built-in objects provided by JavaScript (e.g., String, Object, Math).\par
{\pntext\f2\'B7\tab}\b Host Objects:\b0  Objects provided by the environment hosting the JavaScript engine (e.g., window, document in browsers).\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 10. Clarify the distinctions among function User()\{\}, var user = User(), and var user = new User().\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 function User()\{\}:\b0  Declares a function named User.\par
{\pntext\f2\'B7\tab}\b var user = User();\b0 : Calls the User function and assigns its return value to user.\par
{\pntext\f2\'B7\tab}\b var user = new User();\b0 : Creates a new instance of User (constructor invocation), with this inside the function referring to the new object.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 11. Can you elucidate the purposes of Function.call and Function.apply, along with their notable differences?\par
\b0 Both methods invoke a function with a specified this context.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b call(thisArg, arg1, arg2, ...):\b0  Invokes the function with individual arguments.\par
{\pntext\f2\'B7\tab}\b apply(thisArg, [argsArray]):\b0  Invokes the function with arguments provided as an array.\par

\pard\widctlpar\sa160\sl276\slmult1\b Difference:\b0  The way arguments are passed\emdash call uses a list of arguments, apply uses an array.\par
\b Example:\b0\par
javascript\par
Copy code\par
function greet(greeting, punctuation) \{\par
  console.log(`$\{greeting\}, $\{this.name\}$\{punctuation\}`);\par
\}\par
\par
const person = \{ name: 'Alice' \};\par
greet.call(person, 'Hello', '!'); // Hello, Alice!\par
greet.apply(person, ['Hi', '?']); // Hi, Alice?\par
\par
\b 12. Describe the Function.prototype.bind method.\par
\b0 bind creates a new function that, when called, has its this keyword set to the provided value. It also allows you to preset arguments.\par
\b Example:\b0\par
javascript\par
Copy code\par
function multiply(a, b) \{\par
  return a * b;\par
\}\par
\par
const double = multiply.bind(null, 2);\par
console.log(double(5)); // 10\par
\par
\b 13. Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Feature Detection:\b0  Checking if a feature exists before using it.\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
if ('geolocation' in navigator) \{\par
  // Use geolocation API\par
\}\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Feature Inference:\b0  Assuming the presence of one feature based on the presence of another. Not reliable.\par
{\pntext\f2\'B7\tab}\b User Agent String:\b0  Parsing the UA string to identify the browser. Not recommended due to spoofing risks.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 14. Define the concept of "hoisting."\par
\b0 Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their containing scope during the compilation phase. Only declarations are hoisted, not initializations.\par
\b Example:\b0\par
javascript\par
Copy code\par
console.log(a); // undefined\par
var a = 5;\par
\par
foo(); // Works because function declarations are hoisted\par
function foo() \{\par
  console.log('Hello');\par
\}\par
\par
\b 15. What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?\par
\b0 Type coercion is the automatic or implicit conversion of values from one data type to another.\par
\b Common Pitfalls:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Unexpected Comparisons:\b0\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
'' == 0;        // true\par
false == '0';   // true\par
null == undefined; // true\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Arithmetic Operations:\b0\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
'5' - 2;        // 3 (string '5' is coerced to number 5)\par
'5' + 2;        // '52' (number 2 is coerced to string '2')\par
\b Best Practices:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Use strict equality (===) to avoid unexpected type coercion.\par
{\pntext\f2\'B7\tab}Explicitly convert types when necessary.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 16. Describe event bubbling and event capturing.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Event Bubbling:\b0  The event propagates from the innermost target element up through its ancestors.\par
{\pntext\f2\'B7\tab}\b Event Capturing:\b0  The event propagates from the outermost ancestor down to the target element.\par

\pard\widctlpar\sa160\sl276\slmult1 By default, events bubble up, but you can capture events by setting the capture parameter to true in addEventListener.\par
\par
\b 17. What distinguishes an "attribute" from a "property"?\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Attributes:\b0  Defined in the HTML markup and represent initial values.\par
{\pntext\f2\'B7\tab}\b Properties:\b0  Represent the current state of an element and are accessed via the DOM.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
html\par
Copy code\par
<input id="input1" value="initial">\par
javascript\par
Copy code\par
const input = document.getElementById('input1');\par
console.log(input.getAttribute('value')); // 'initial'\par
console.log(input.value); // 'initial'\par
\par
input.value = 'changed';\par
console.log(input.getAttribute('value')); // 'initial'\par
console.log(input.value); // 'changed'\par
\par
\b 18. List the advantages and disadvantages of extending built-in JavaScript objects.\par
Advantages:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Can add custom functionality to all instances of an object type.\par

\pard\widctlpar\sa160\sl276\slmult1\b Disadvantages:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Compatibility Issues:\b0  May conflict with future ECMAScript versions or other libraries.\par
{\pntext\f2\'B7\tab}\b Maintenance Complexity:\b0  Increases the difficulty of understanding and maintaining code.\par
{\pntext\f2\'B7\tab}\b Performance Overhead:\b0  Modifying prototypes can negatively affect performance.\par

\pard\widctlpar\sa160\sl276\slmult1\b Best Practice:\b0  Avoid modifying built-in prototypes; use utility functions or subclasses instead.\par
\par
\b 19. Discuss the same-origin policy's implications for JavaScript.\par
\b0 The same-origin policy restricts scripts from interacting with resources from a different origin (protocol, domain, or port), enhancing security by preventing malicious scripts from accessing sensitive data.\par
\b Implications:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b AJAX Requests:\b0  Cannot make cross-origin requests without proper CORS headers.\par
{\pntext\f2\'B7\tab}\b DOM Access:\b0  Cannot access or manipulate the DOM of a page from a different origin.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 20. Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?\par
\b0 The ternary operator is called so because it takes three operands. "Ternary" means composed of three parts.\par
\b Syntax:\b0\par
javascript\par
Copy code\par
condition ? expressionIfTrue : expressionIfFalse;\par
\b Example:\b0\par
javascript\par
Copy code\par
const status = age >= 18 ? 'Adult' : 'Minor';\par
\par
\b 21. Define strict mode and outline some of its advantages and disadvantages.\par
\b0 Strict mode is a way to opt into a restricted variant of JavaScript by adding "use strict"; at the beginning of a script or function.\par
\b Advantages:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Eliminates Some Silent Errors:\b0  Throws exceptions for common coding bloopers.\par
{\pntext\f2\'B7\tab}\b Prevents Accidental Globals:\b0  Disallows variable assignments without declarations.\par
{\pntext\f2\'B7\tab}\b Enhances Security:\b0  Restricts certain actions, making code more secure.\par

\pard\widctlpar\sa160\sl276\slmult1\b Disadvantages:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Incompatibility:\b0  May break existing code that relies on deprecated features.\par
{\pntext\f2\'B7\tab}\b Restrictions:\b0  Certain features like with statements are disallowed.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 22. Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.\par
Pros:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Enhanced Syntax:\b0  Languages like TypeScript offer features like static typing.\par
{\pntext\f2\'B7\tab}\b Better Tooling:\b0  Improved IDE support and error checking.\par
{\pntext\f2\'B7\tab}\b Modern Features:\b0  Access to features not yet available in standard JavaScript.\par

\pard\widctlpar\sa160\sl276\slmult1\b Cons:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Additional Build Step:\b0  Requires compilation, adding complexity.\par
{\pntext\f2\'B7\tab}\b Learning Curve:\b0  Developers need to learn a new language or syntax.\par
{\pntext\f2\'B7\tab}\b Debugging Complexity:\b0  Debugging compiled code can be more challenging.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 23. What tools and techniques do you employ for debugging JavaScript code?\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Browser Developer Tools:\b0  Use the built-in debugger to step through code.\par
{\pntext\f2\'B7\tab}\b Console Logging:\b0  Utilize console.log(), console.error(), etc.\par
{\pntext\f2\'B7\tab}\b Debugging Statements:\b0  Insert debugger; statements in code.\par
{\pntext\f2\'B7\tab}\b Linters and Formatters:\b0  Use tools like ESLint to catch errors early.\par
{\pntext\f2\'B7\tab}\b Unit Testing:\b0  Write tests to verify code behavior.\par

\pard\widctlpar\sa160\sl276\slmult1\par
\b 24. Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.\par
Benefits:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Predictability:\b0  Easier to reason about code since data doesn't change.\par
{\pntext\f2\'B7\tab}\b Thread Safety:\b0  No side effects, reducing concurrency issues.\par
{\pntext\f2\'B7\tab}\b Optimization Opportunities:\b0  Enables memoization and other performance enhancements.\par

\pard\widctlpar\sa160\sl276\slmult1\b Drawbacks:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Performance Overhead:\b0  Requires copying data structures, which can be costly.\par
{\pntext\f2\'B7\tab}\b Increased Memory Usage:\b0  Each change creates a new object or array.\par

\pard\widctlpar\sa160\sl276\slmult1\b Achieving Immutability:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b Object.freeze():\b0  Shallowly freezes objects.\par
{\pntext\f2\'B7\tab}\b Immutable Libraries:\b0  Use libraries like Immutable.js or Immer.\par
{\pntext\f2\'B7\tab}\b Spread Operator:\b0\par

\pard\widctlpar\sa160\sl276\slmult1 javascript\par
Copy code\par
const newObj = \{ ...oldObj, newProp: value \};\par
\par
\b 25. Differentiate between synchronous and asynchronous functions and elucidate the event loop.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Synchronous Functions:\b0  Execute in sequence, blocking subsequent code until completion.\par
{\pntext\f2\'B7\tab}\b Asynchronous Functions:\b0  Allow the program to continue execution without waiting for the function to complete.\par

\pard\widctlpar\sa160\sl276\slmult1\b Event Loop:\b0\par
The event loop manages the execution of asynchronous code by moving tasks from the task queue to the call stack when the stack is empty, enabling non-blocking I/O operations.\par
\par
\b 26. Explain the disparities between variables created using let, var, or const.\par

\pard 
{\listtext\f0\u10625?\tab}\jclisttab\tx360\ls1\widctlpar\fi-360\li720\sa160\sl276\slmult1 var:\b0\par

\pard 
{\listtext\f0\u10625?\tab}\jclisttab\tx360\ls1\ilvl1\widctlpar\fi-360\li1440\sa160\sl276\slmult1 Function-scoped or globally scoped.\par
{\listtext\f0 1\tab}Can be redeclared and updated.\par
{\listtext\f0 2\tab}Hoisted and initialized with undefined.\par

\pard 
{\listtext\f0\u10625?\tab}\jclisttab\tx360\ls1\widctlpar\fi-360\li720\sa160\sl276\slmult1\b let:\b0\par

\pard 
{\listtext\f0\u10625?\tab}\jclisttab\tx360\ls1\ilvl1\widctlpar\fi-360\li1440\sa160\sl276\slmult1 Block-scoped.\par
{\listtext\f0 1\tab}Cannot be redeclared in the same scope.\par
{\listtext\f0 2\tab}Hoisted but not initialized (Temporal Dead Zone).\par

\pard 
{\listtext\f0\u10625?\tab}\jclisttab\tx360\ls1\widctlpar\fi-360\li720\sa160\sl276\slmult1\b const:\b0\par

\pard 
{\listtext\f0\u10625?\tab}\jclisttab\tx360\ls1\ilvl1\widctlpar\fi-360\li1440\sa160\sl276\slmult1 Block-scoped.\par
{\listtext\f0 1\tab}Cannot be redeclared or updated.\par
{\listtext\f0 2\tab}Must be initialized at declaration.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
javascript\par
Copy code\par
\{\par
  var a = 1;\par
  let b = 2;\par
  const c = 3;\par
\}\par
\par
console.log(a); // 1\par
console.log(b); // ReferenceError\par
console.log(c); // ReferenceError\par
\par
\b 27. Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax.\par
ES5 Function Constructors:\b0\par
javascript\par
Copy code\par
function Animal(name) \{\par
  this.name = name;\par
\}\par
\par
Animal.prototype.speak = function () \{\par
  console.log(`$\{this.name\} makes a noise.`);\par
\};\par
\b ES6 Classes:\b0\par
javascript\par
Copy code\par
class Animal \{\par
  constructor(name) \{\par
    this.name = name;\par
  \}\par
\par
  speak() \{\par
    console.log(`$\{this.name\} makes a noise.`);\par
  \}\par
\}\par
\b Arrow Function Use Case:\b0\par
Ideal for functions where you want to preserve the this context of the enclosing scope.\par
javascript\par
Copy code\par
const person = \{\par
  name: 'Bob',\par
  hobbies: ['Reading', 'Gaming'],\par
  printHobbies() \{\par
    this.hobbies.forEach(hobby => \{\par
      console.log(`$\{this.name\} likes $\{hobby\}`);\par
    \});\par
  \},\par
\};\par
\par
person.printHobbies();\par
\par
\b 28. Describe the advantages of using the arrow syntax for methods in constructors.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Lexical this Binding:\b0  Arrow functions inherit this from the enclosing scope, eliminating the need to use .bind(this).\par
{\pntext\f2\'B7\tab}\b Concise Syntax:\b0  Simplifies the code, making it more readable.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
javascript\par
Copy code\par
function Timer() \{\par
  this.seconds = 0;\par
\par
  setInterval(() => \{\par
    this.seconds++;\par
    console.log(this.seconds);\par
  \}, 1000);\par
\}\par
\par
new Timer();\par
\par
\b 29. Define a higher-order function and provide an example of object or array destructuring.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1 Higher-Order Function:\b0  A function that takes another function as an argument or returns a function.\par

\pard\widctlpar\sa160\sl276\slmult1\b Example:\b0\par
javascript\par
Copy code\par
function greet(message) \{\par
  return function(name) \{\par
    console.log(`$\{message\}, $\{name\}`);\par
  \};\par
\}\par
\par
const sayHello = greet('Hello');\par
sayHello('Alice'); // 'Hello, Alice'\par
\b Destructuring Example:\b0\par
javascript\par
Copy code\par
const person = \{ name: 'Alice', age: 25 \};\par
const \{ name, age \} = person;\par
\par
const numbers = [1, 2, 3];\par
const [first, second, third] = numbers;\par
\par
\b 30. Give an example of generating a string using ES6 Template Literals and explain their benefits.\par
Example:\b0\par
javascript\par
Copy code\par
const user = 'Charlie';\par
const message = `Hello, $\{user\}! Welcome to our website.`;\par
\par
console.log(message); // 'Hello, Charlie! Welcome to our website.'\par
\b Benefits:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\sa160\sl276\slmult1\b String Interpolation:\b0  Embed variables and expressions directly.\par
{\pntext\f2\'B7\tab}\b Multiline Strings:\b0  Easily create strings that span multiple lines.\par
{\pntext\f2\'B7\tab}\b Improved Readability:\b0  Code is cleaner and more maintainable.\par

\pard\widctlpar\sa160\sl276\slmult1\par

\pard\sa200\sl276\slmult1\kerning0\f1\fs22\lang9\par
}
 